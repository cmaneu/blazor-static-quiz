@page "/{ExamId}/_admin/"
@using Microsoft.AspNetCore.WebUtilities
@using BlazorQuiz.Model
@using BlazorQuiz.FrontEnd.Services
@using System.Security.Cryptography
@inject NavigationManager NavManager
@inject ExamService ExamService


    <div class="container-fluid">

        <div class="row">
            <h2>Exam Admin</h2>
        </div>

        @if (Answers == null)
        {
            <p>Loading</p>
        }
        else
        {
            <div class="row">
                <h3>Summary</h3>
                <div class="table-responsive">
                    <table class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>First Name</th>
                                <th>Last Name</th>
                                <th>Completed at</th>
                                <th>Score</th>
                                <th>Alert?</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var answerSheet in Answers)
                            {
                                <tr>
                                    <td>@answerSheet?.Candidate?.FirstName</td>
                                    <td>@answerSheet?.Candidate?.LastName</td>
                                    <td>@answerSheet?.EndedAt.ToString("U")</td>
                                    <td>@answerSheet?.Score %</td>
                                    <td>
                                        @if (answerSheet?.Log.Count > 0)
                                        {
                                            <span>!</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            @if (AnswersLists != null)
            {
                <h3>Details</h3>
                <div class="table-responsive">
                    <table class="table table-striped table-sm" data-sticky-header="true">
                        <thead class="sticky-header">
                        <tr>
                            <th>Question</th>
                            @foreach (var candidate in CandidateName)
                            {
                                <th>@candidate</th>
                            }
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var answerSheet in AnswersLists)
                        {
                            <tr>
                                <td>@answerSheet.Key</td>
                               @foreach (var question in answerSheet.Value)
                               {
                                   <td>
                                       @if (question)
                                       {
                                           <span class="badge badge-info">OK</span>    
                                       }
                                       else
                                       {
                                           <span class="badge badge-danger">Faux</span>    
                                       }
                                       
                                       
                                   </td>
                               }
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }


        }


    </div>





@code {
    [Parameter]
    public string ExamId { get; set; }

    private string accessCode;

    public List<AnswerSheet> Answers { get; set; }

    public List<string> CandidateName { get; set; }

    public Dictionary<int, List<bool>> AnswersLists { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var queryParamValue))
        {
            accessCode = queryParamValue;
        }

        if(string.IsNullOrEmpty(accessCode))
            NavManager.NavigateTo("/");

        // Load data
        Answers = await ExamService.AdminGetAnswers(ExamId, accessCode);
        StateHasChanged();

        await ExamService.LoadExam(ExamId);


        CandidateName = new List<string>();
        AnswersLists = new Dictionary<int, List<bool>>();

        foreach (var quest  in Answers.First().Answers)
        {
            AnswersLists.Add(quest?.Question?.Id ?? 0, new List<bool>());
        }

        foreach (var ans in Answers)
        {
            CandidateName.Add(ans.Candidate.FirstName);
            ans.ComputeScore();
            foreach (var currentAnswerr in ans.Answers)
            {
                AnswersLists[currentAnswerr.Question.Id].Add(QuestionAnsweredCorrectly(currentAnswerr));
            }
        }


        StateHasChanged();
    }


    private bool QuestionAnsweredCorrectly(Answer currentAnswerr)
    {
        var originalQuestion = ExamService.CurrentExam.Questions.FirstOrDefault(q => q.Id == currentAnswerr.Question.Id);
        if (originalQuestion == null)
            return false;

        for (int i = 0; i < currentAnswerr.Choices.Count; i++)
        {
            if (currentAnswerr.Choices[i].IsSelected != originalQuestion.Choices[i].IsCorrectChoice)
                return false;


        }

        return true;
    }

}
